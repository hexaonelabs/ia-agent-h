<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Agent H Assistant chat interface</title>
    <link href="/css/styles.css" rel="stylesheet">
  </head>
  <body class="bg-gradient-to-br from-purple-900 via-blue-900 to-teal-800">
    <div id="app" class="min-h-screen flex flex-col">
      <!-- Fixed Header -->
      <header class="glass sticky top-0 z-10 px-4 py-3 sm:py-4">
        <h1 class="text-2xl sm:text-2xl font-bold text-white text-center">
          Agent H
        </h1>
      </header>

      <!-- Messages Container -->
      <main class="flex-grow space-y-4">
        <div class="messages-container space-y-4">
          <!-- Messages will be inserted here -->
          <div class="animate-fade-in animate-slide-up flex justify-start">
            <div class="max-w-[85%] p-4 rounded-2xl break-words bg-white/10 text-white">
              {{ message }}
            </div>
          </div>
        </div>
        <!-- Extra padding for content behind fixed form -->
        <div class="h-32"></div>
      </main>

      <!-- Fixed Bottom Form -->
      <form id="chat-form" class="glass fixed bottom-0 left-0 right-0 p-4 flex items-center gap-2">
        <input
          type="text"
          id="user-input"
          class="flex-grow p-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/30 transition-all"
          placeholder="Type your message..."
          autocomplete="off"
        >
        <button
          type="submit"
          class="p-3 rounded-xl bg-white/20 hover:bg-white/30 focus:outline-none focus:ring-2 focus:ring-white/30 transition-all flex-shrink-0"
          aria-label="Send message"
        >
          <svg class="min-w-[32px] text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
          </svg>
        </button>
      </form>
    </div>
    {{!-- <script type="module" src="/main.js"></script> --}}
    <script type="module">

      let currentThreadId;
      const mainContainer = document.querySelector('main');
      const messagesContainer = document.querySelector('.messages-container');
      const chatForm = document.getElementById('chat-form');
      const userInput = document.getElementById('user-input');

      let messages = [];

      function createMessageElement(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `animate-fade-in animate-slide-up flex ${type === 'user' ? 'justify-end' : 'justify-start'}`;
        
        const messageContent = document.createElement('div');
        messageContent.className = `max-w-[85%] p-4 rounded-2xl break-words space-y-4" ${
          type === 'user' 
            ? 'bg-white/20 text-white' 
            : 'bg-white/10 text-white'
        }`;
        
        messageContent.innerHTML = message;
        messageDiv.appendChild(messageContent);
        return messageDiv;
      }

      function addMessage(message, type) {
        messages.push({ message, type });
        const messageElement = createMessageElement(message, type);
        messagesContainer.appendChild(messageElement);
        // Scroll to the bottom of the messages container
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      async function sendMessage(message) {
        if (message === ':test') {
          const response = await fetch('/api/test', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          
          if (!response.ok) throw new Error('Failed to get response');
          const { data = [] } = await response.json();
          addMessage(data.join('<br>'), 'assistant');
          return;
        }
        if (message === ':logs') {
          const response = await fetch('/api/logs', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          
          if (!response.ok) throw new Error('Failed to get response');
          const { data = [] } = await response.json();
          addMessage(data.join('<br>'), 'assistant');
          return;
        }
        try {
          const response = await fetch('/api/prompt', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userInput: message }),
          });
          
          if (!response.ok) throw new Error('Failed to get response');
          
          const { data = {} } = await response.json();
          currentThreadId = data?.threadId;
          addMessage(data?.message, 'assistant');
        } catch (error) {
          console.error('Error:', error);
          addMessage('Sorry, I encountered an error processing your request.', 'assistant');
        }
      }

      chatForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const message = userInput.value.trim();
        if (!message) return;
        
        addMessage(message, 'user');
        userInput.value = '';
        await sendMessage(message);
      });

      // Add initial welcome message
      addMessage('How can I help you today?', 'assistant');
    </script>
  </body>
</html>